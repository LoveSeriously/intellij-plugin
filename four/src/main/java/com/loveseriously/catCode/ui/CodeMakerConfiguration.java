package com.loveseriously.catCode.ui;

import com.intellij.ui.components.JBTabbedPane;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.loveseriously.catCode.CodeTemplate;
import com.loveseriously.catCode.setting.CodeMakerSettings;

import javax.swing.*;
import java.awt.*;
import java.util.HashMap;
import java.util.Map;

/**
 * @author lw
 * @date 2019-08-20
 */
public class CodeMakerConfiguration {
    private JPanel mainPane;
    private JButton addTemplateButton;
    private JBTabbedPane tabbedPane;
    private Map<String, TemplateEditPane> editPaneMap;

    public CodeMakerConfiguration(CodeMakerSettings settings) {
        tabbedPane = new JBTabbedPane();
        editPaneMap = new HashMap<>();
        addTemplateButton.addActionListener(e -> {
            TemplateEditPane editPane = new TemplateEditPane(settings, "", this);
            String title = "Untitled";
            tabbedPane.addTab(title, editPane.getTemplateEdit());
            tabbedPane.setSelectedIndex(tabbedPane.getTabCount() - 1);
            editPaneMap.put(title, editPane);
        });
        resetTabPane(settings);
        GridConstraints constraints = new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,
                GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(300, 300), null, 0, true);
        mainPane.add(tabbedPane, constraints);
    }

    public void refresh(CodeMakerSettings settings) {
        tabbedPane.removeAll();
        editPaneMap.clear();
        resetTabPane(settings);
    }

    private void resetTabPane(CodeMakerSettings settings) {
        settings.getCodeTemplates().forEach((key, value) -> {
            TemplateEditPane editPane = new TemplateEditPane(settings, key, this);
            tabbedPane.addTab(key, editPane.getTemplateEdit());
            editPaneMap.put(key, editPane);
        });
    }

    public Map<String, CodeTemplate> getTabTemplates() {
        Map<String, CodeTemplate> map = new HashMap<>();
        editPaneMap.forEach((key, value) -> {
            CodeTemplate codeTemplate = new CodeTemplate(value.getTemplateName(), value
                    .getClassName(), value.getTemplate(), value.getClassNumber());
            map.put(codeTemplate.getName(), codeTemplate);
        });
        return map;
    }

    /**
     * Getter method for property <tt>mainPane</tt>.
     *
     * @return property value of mainPane
     */
    public JPanel getMainPane() {
        return mainPane;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPane = new JPanel();
        mainPane.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPane.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        addTemplateButton = new JButton();
        addTemplateButton.setText("Add Template");
        panel1.add(addTemplateButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPane;
    }
}
